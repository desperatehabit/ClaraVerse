export interface ElectronAPI {
  getAppPath: () => Promise<string>;
  getAppVersion: () => string;
  getElectronVersion: () => string;
  getPlatform: () => string;
  isDev: boolean;
  requestMicrophonePermission: () => Promise<boolean>;
  getServicePorts: () => Promise<any>;
  getPythonPort: () => Promise<number>;
  checkPythonBackend: () => Promise<any>;
  checkDockerServices: () => Promise<any>;
  getPythonBackendInfo: () => Promise<any>;
  startDockerService: (serviceName: string) => Promise<any>;
  stopDockerService: (serviceName: string) => Promise<any>;
  restartDockerService: (serviceName: string) => Promise<any>;
  checkDockerUpdates: () => Promise<any>;
  updateDockerContainers: (containerNames: string[]) => Promise<any>;
  getSystemInfo: () => Promise<any>;
  getUpdateInfo: () => Promise<any>;
  startInAppDownload: (updateInfo: any) => Promise<any>;
  checkLlamacppUpdates: () => Promise<any>;
  updateLlamacppBinaries: () => Promise<any>;
  clipboard: {
    writeText: (text: string) => void;
    readText: () => string;
  };
  send: (channel: string, data?: any) => void;
  sendReactReady: () => void;
  receive: (channel: string, callback: (...args: any[]) => void) => void;
  removeListener: (channel: string, callback: (...args: any[]) => void) => void;
  removeAllListeners: (channel: string) => void;
  getWorkflowsPath: () => Promise<string>;
  dialog: {
    showOpenDialog: (options: any) => Promise<any>;
  };
  hideToTray: () => void;
  showFromTray: () => void;
  setStartupSettings: (settings: any) => Promise<any>;
  getStartupSettings: () => Promise<any>;
  getInitializationState: () => Promise<any>;
  saveFeatureSelection: (features: any) => Promise<any>;
  initializeService: (serviceName: string) => Promise<any>;
  getContainers: () => Promise<any>;
  containerAction: (containerId: string, action: string) => Promise<any>;
  createContainer: (containerConfig: any) => Promise<any>;
  getContainerStats: (containerId: string) => Promise<any>;
  getContainerLogs: (containerId: string) => Promise<any>;
  pullImage: (image: string) => Promise<any>;
  createNetwork: (networkConfig: any) => Promise<any>;
  listNetworks: () => Promise<any>;
  removeNetwork: (networkId: string) => Promise<any>;
  getImages: () => Promise<any>;
  removeImage: (imageId: string) => Promise<any>;
  pruneContainers: () => Promise<any>;
  pruneImages: () => Promise<any>;
  getDockerInfo: () => Promise<any>;
  getDockerVersion: () => Promise<any>;
  comfyuiStatus: () => Promise<any>;
  comfyuiStart: () => Promise<any>;
  comfyuiStop: () => Promise<any>;
  comfyuiRestart: () => Promise<any>;
  comfyuiLogs: () => Promise<any>;
  comfyuiOptimize: () => Promise<any>;
  saveComfyUIConsent: (hasConsented: boolean) => Promise<any>;
  getComfyUIConsent: () => Promise<any>;
  createUserConsentFile: (consentData: any) => Promise<any>;
  getGPUInfo: () => Promise<any>;
  getServicesStatus: () => Promise<any>;
  invoke: (channel: string, ...args: any[]) => Promise<any>;
  on: (channel: string, callback: (...args: any[]) => void) => void;
  off: (channel: string, callback: (...args: any[]) => void) => void;
  onServiceStatusUpdate: (callback: (data: any) => void) => void;
  requestInitialization: () => Promise<any>;
  getInitializationStatus: () => Promise<any>;
  start: () => Promise<any>;
  stop: () => Promise<any>;
  restart: () => Promise<any>;
  getStatus: () => Promise<any>;
  getStatusWithHealth: () => Promise<any>;
  getModels: () => Promise<any>;
  getApiUrl: () => Promise<any>;
  regenerateConfig: () => Promise<any>;
  debugBinaryPaths: () => Promise<any>;
  getGPUDiagnostics: () => Promise<any>;
  getPerformanceSettings: () => Promise<any>;
  savePerformanceSettings: (settings: any) => Promise<any>;
  loadPerformanceSettings: () => Promise<any>;
  setCustomModelPath: (path: string) => Promise<any>;
  getCustomModelPaths: () => Promise<any>;
  scanCustomPathModels: (path: string) => Promise<any>;
  getModelEmbeddingInfo: (modelPath: string) => Promise<any>;
  searchHuggingFaceMmproj: (modelName: string, embeddingSize: number) => Promise<any>;
  downloadOfficialBinary: () => Promise<any>;
  checkForUpdates: () => Promise<any>;
  updateToLatest: () => Promise<any>;
  getVersion: () => Promise<any>;
  getAvailableBackends: () => Promise<any>;
  setBackendOverride: (backendId: string) => Promise<any>;
  getBackendOverride: () => Promise<any>;
  getConfigAsJson: () => Promise<any>;
  forceReconfigure: () => Promise<any>;
  getConfigurationInfo: () => Promise<any>;
  restartWithOverrides: () => Promise<any>;
  saveConfigFromJson: (jsonConfig: any) => Promise<any>;
  runLlamaOptimizer: (preset: string) => Promise<any>;
  saveConfigAndRestart: (jsonConfig: any) => Promise<any>;
  getModelConfigurations: () => Promise<any>;
  saveModelConfiguration: (modelName: string, modelConfig: any) => Promise<any>;
  saveAllModelConfigurations: (modelConfigs: any) => Promise<any>;
  searchHuggingFaceModels: (query: string, limit?: number, sort?: string) => Promise<any>;
  downloadModel: (modelId: string, fileName: string, downloadPath: string) => Promise<any>;
  downloadModelWithCustomName: (modelId: string, fileName: string, customSaveName: string, downloadPath: string) => Promise<any>;
  downloadModelWithDependencies: (modelId: string, fileName: string, allFiles: any[], downloadPath: string) => Promise<any>;
  getLocalModels: () => Promise<any>;
  deleteLocalModel: (filePath: string) => Promise<any>;
  stopDownload: (fileName: string) => Promise<any>;
  restartLlamaSwap: () => Promise<any>;
  saveMmprojMappings: (mappings: any) => Promise<any>;
  loadMmprojMappings: () => Promise<any>;
  getAvailableMmprojFiles: () => Promise<any>;
  onDownloadProgress: (callback: (data: any) => void) => void;
  searchCivitAI: (query: string, types?: string[], sort?: string, apiKey?: string, nsfw?: boolean) => Promise<any>;
  searchHuggingFace: (query: string, modelType?: string, author?: string) => Promise<any>;
  downloadModelFile: (url: string, filename: string, modelType: string, source: string) => Promise<any>;
  getLocalModelFiles: () => Promise<any>;
  deleteLocalModelFile: (modelType: string, filename: string) => Promise<any>;
  saveApiKeys: (keys: any) => Promise<any>;
  getApiKeys: () => Promise<any>;
  comfyuiDownloadModel: (url: string, filename: string, modelType: string, source: string, apiKey?: string) => Promise<any>;
  comfyuiGetLocalModels: () => Promise<any>;
  comfyuiDeleteModel: (modelType: string, filename: string) => Promise<any>;
  comfyuiGetModelsDir: () => Promise<any>;
  comfyuiInternalListModels: (category: string) => Promise<any>;
  comfyuiInternalGetStorageInfo: () => Promise<any>;
  comfyuiInternalDownloadModel: (url: string, filename: string, category: string) => Promise<any>;
  comfyuiInternalRemoveModel: (filename: string, category: string) => Promise<any>;
  comfyuiInternalGetStatus: () => Promise<any>;
  comfyuiInternalSearchModels: (query: string, source: string, category: string) => Promise<any>;
  comfyuiInternalBackupModels: (category: string, backupPath: string) => Promise<any>;
  onComfyUIDownloadProgress: (callback: (data: any) => void) => void;
  onComfyUIDownloadComplete: (callback: (data: any) => void) => void;
  onComfyUIInternalDownloadProgress: (callback: (data: any) => void) => void;
  onComfyUIInternalDownloadStart: (callback: (data: any) => void) => void;
  onComfyUIInternalDownloadComplete: (callback: (data: any) => void) => void;
  onComfyUIInternalDownloadError: (callback: (data: any) => void) => void;
  onComfyUIInternalInstallStart: (callback: (data: any) => void) => void;
  onComfyUIInternalInstallComplete: (callback: (data: any) => void) => void;
  onComfyUIInternalInstallError: (callback: (data: any) => void) => void;
  comfyuiLocalListModels: (category: string) => Promise<any>;
  comfyuiLocalDownloadModel: (url: string, filename: string, category: string, apiKey?: string, source?: string) => Promise<any>;
  comfyuiLocalDeleteModel: (filename: string, category: string) => Promise<any>;
  comfyuiLocalImportModel: (externalPath: string, filename: string, category: string) => Promise<any>;
  comfyuiLocalGetStorageInfo: () => Promise<any>;
  onComfyUILocalDownloadProgress: (callback: (data: any) => void) => void;
  onComfyUILocalDownloadComplete: (callback: (data: any) => void) => void;
  onComfyUILocalDownloadError: (callback: (data: any) => void) => void;
  onModelDownloadProgress: (callback: (data: any) => void) => void;
  getServers: () => Promise<any>;
  addServer: (serverConfig: any) => Promise<any>;
  removeServer: (name: string) => Promise<any>;
  updateServer: (name: string, updates: any) => Promise<any>;
  startServer: (name: string) => Promise<any>;
  stopServer: (name: string) => Promise<any>;
  restartServer: (name: string) => Promise<any>;
  getServerStatus: (name: string) => Promise<any>;
  testServer: (name: string) => Promise<any>;
  getTemplates: () => Promise<any>;
  startAllEnabled: () => Promise<any>;
  stopAll: () => Promise<any>;
  startPreviouslyRunning: () => Promise<any>;
  saveRunningState: () => Promise<any>;
  importClaudeConfig: (configPath: string) => Promise<any>;
  executeToolCall: (toolCall: any) => Promise<any>;
  diagnoseNode: () => Promise<any>;
  getFullscreenStartupPreference: () => Promise<boolean>;
  setFullscreenStartupPreference: (enabled: boolean) => Promise<any>;
  toggleFullscreen: () => Promise<any>;
  getFullscreenStatus: () => Promise<boolean>;
  getFeatureConfig: () => Promise<any>;
  updateFeatureConfig: (config: any) => Promise<any>;
  resetFeatureConfig: () => Promise<any>;
  readLogs: (lines?: number) => Promise<string>;
  getLogFiles: () => Promise<any>;
  clearLogs: () => Promise<any>;
  getDesktopSources: () => Promise<any>;
  getScreenAccessStatus: () => Promise<any>;
  requestScreenAccess: () => Promise<any>;
}